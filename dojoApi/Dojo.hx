typedef Dojo = {
public function trim(str:String):String;
public function connect(obj:Dynamic,event:String,context:Dynamic,method:Dynamic,dontFix:Bool):Void;
public function body():Dynamic;
public function blendColors(start:Dynamic,end:Dynamic,weight:Float,?obj:Dynamic):Dynamic;
public function colorFromRgb(color:String,?obj:Dynamic):Dynamic;
public function colorFromHex(color:String,?obj:Dynamic):Dynamic;
public function colorFromArray(a:Array<Dynamic>,?obj:Dynamic):Dynamic;
public function colorFromString(str:String,?obj:Dynamic):Void;
public function mixin(obj:Dynamic,props:Dynamic):Dynamic;
public function setObject(name:String,value:Dynamic,?context:Dynamic):Dynamic;
public function getObject(name:String,?create:Bool,?context:Dynamic):Dynamic;
public function exists(name:String,?obj:Dynamic):Bool;
public function eval(scriptFragment:String):Dynamic;
public function deprecated(behaviour:String,?extra:String,?removal:String):Void;
public function experimental(moduleName:String,?extra:String):Void;
public function windowUnloaded():Void;
public function addOnWindowUnload(?obj:Dynamic,?functionName:Dynamic):Void;
public function addOnUnload(?obj:Dynamic,?functionName:Dynamic):Void;
public function pushContext(?g:Dynamic,?d:Dynamic):Array<Dynamic>;
public function popContext():Void;
public function byId(id:Dynamic,?doc:Dynamic):Dynamic;
public function exit(exitcode:Dynamic):Void;
public function loaded():Void;
public function unloaded():Void;
public function addOnLoad(?obj:Dynamic,functionName:Dynamic):Void;
public function loadInit(init:Dynamic):Void;
public function require(moduleName:String,?omitModuleCheck:Bool):Void;
public function provide(resourceName:String):Dynamic;
public function platformRequire(modMap:Dynamic):Void;
public function requireIf(condition:Bool,resourceName:String):Void;
public function registerModulePath(module:String,prefix:String):Void;
public function requireLocalization(moduleName:String,bundleName:String,?locale:String,?availableFlatLocales:String):Void;
public function moduleUrl(module:String,url:Dynamic):String;
public function xdRequireLocalization(m:Dynamic,b:Dynamic,?locale:String,fLocales:Dynamic,moduleName:String,bundleName:String,availableFlatLocales:String):Void;
public function indexOf(array:Array<Dynamic>,value:Dynamic,?fromIndex:Int,?findLast:Bool):Float;
public function lastIndexOf(array:Array<Dynamic>,value:Dynamic,?fromIndex:Int):Float;
public function forEach(arr:Dynamic,callBack:Dynamic,?thisObject:Dynamic):Void;
public function every(arr:Dynamic,callBack:Dynamic,?thisObject:Dynamic):Bool;
public function some(arr:Dynamic,callBack:Dynamic,?thisObject:Dynamic):Bool;
public function map(arr:Dynamic,callBack:Dynamic,?thisObject:Dynamic):Array<Dynamic>;
public function filter(arr:Array<Dynamic>,callBack:Dynamic,?thisObject:Dynamic):Array<Dynamic>;
public function disconnect(handle:Dynamic):Void;
public function connectPublisher(topic:String,obj:Dynamic,event:String):Dynamic;
public function fixEvent(evt:Dynamic,sender:Dynamic):Void;
public function stopEvent(evt:Dynamic):Void;
public function fadeIn(args:Dynamic):Dynamic;
public function fadeOut(args:Dynamic):Dynamic;
public function animateProperty(args:Dynamic):Dynamic;
public function anim(node:Dynamic,properties:Dynamic,?duration:Int,?easing:Dynamic,?onEnd:Dynamic,?delay:Int):Dynamic;
public function isString(it:Dynamic):Bool;
public function destroy(node:Dynamic):Void;
public function isDescendant(node:Dynamic,ancestor:Dynamic):Bool;
public function setSelectable(node:Dynamic,selectable:Bool):Void;
public function place(node:Dynamic,refNode:Dynamic,?position:Dynamic):Dynamic;
public function getComputedStyle(node:Dynamic):Dynamic;
public function style(node:Dynamic,?style:Dynamic,?value:String):Void;
public function marginBox(node:Dynamic,?box:Dynamic):Dynamic;
public function contentBox(node:Dynamic,?box:Dynamic):Dynamic;
public function coords(node:Dynamic,?includeScroll:Bool):Void;
public function hasAttr(node:Dynamic,name:String):Bool;
public function attr(node:Dynamic,name:Dynamic,?value:String):Void;
public function removeAttr(node:Dynamic,name:String):Void;
public function create(tag:Dynamic,attrs:Dynamic,?refNode:Dynamic,?pos:String):Dynamic;
public function empty(node:Dynamic):Void;
public function hasClass(node:Dynamic,classStr:String):Bool;
public function addClass(node:Dynamic,classStr:String):Void;
public function removeClass(node:Dynamic,classStr:String):Void;
public function toggleClass(node:Dynamic,classStr:String,?condition:Bool):Void;
public function fromJson(json:String):Dynamic;
public function toJson(it:Dynamic,?prettyPrint:Bool,?_indentStr:String):Dynamic;
public function isArray(it:Dynamic):Bool;
public function isFunction(it:Dynamic):Bool;
public function isObject(it:Dynamic):Void;
public function isArrayLike(it:Dynamic):Bool;
public function isAlien(it:Dynamic):Bool;
public function extend(constructor:Dynamic,props:Dynamic):Dynamic;
public function hitch(scope:Dynamic,method:Dynamic):Dynamic;
public function delegate(obj:Dynamic,props:Dynamic):Void;
public function partial(method:Dynamic):Dynamic;
public function clone(o:Dynamic):Array<Dynamic>;
public function query(query:String,?root:Dynamic,?listCtor:Dynamic):dojo.NodeList;
public function setContext(globalObject:Dynamic,globalDocument:Dynamic):Void;
public function withGlobal(globalObject:Dynamic,callBack:Dynamic,?thisObject:Dynamic,?cbArguments:Array<Dynamic>):Void;
public function withDoc(documentObject:Dynamic,callBack:Dynamic,?thisObject:Dynamic,?cbArguments:Array<Dynamic>):Void;
public function formToObject(formNode:Dynamic):Dynamic;
public function objectToQuery(map:Dynamic):String;
public function formToQuery(formNode:Dynamic):String;
public function formToJson(formNode:Dynamic,?prettyPrint:Bool):String;
public function queryToObject(str:String):Dynamic;
public function xhr(method:String,args:Dynamic,?hasBody:Bool):Dynamic;
public function xhrGet(args:Dynamic):Dynamic;
public function rawXhrPost():Void;
public function xhrPost(args:Dynamic):Dynamic;
public function rawXhrPut():Void;
public function xhrPut(args:Dynamic):Dynamic;
public function xhrDelete(args:Dynamic):Dynamic;
public function behavior():Void;
public var global:Dynamic;
public var isIE:Float;
public var isOpera:Float;
public var isFF:Float;
public var isWebKit:Float;
// public var NodeList-fx:Dynamic;
// public var NodeList-html:Dynamic;
public var locale:Dynamic;
public var isBrowser:Bool;
public var isKhtml:Float;
public var isMozilla:Float;
public var isSafari:Float;
public var isChrome:Float;
public var baseUrl:String;
public var isAIR:Float;
public var isMoz:Dynamic;
public var isQuirks:Bool;
public var isRhino:Bool;
public var isSpidermonkey:Bool;
public var requireAfterIf:Dynamic;
public var nonDebugProvide:Dynamic;
public var subscribe:Dynamic;
public var unsubscribe:Dynamic;
public var publish:Dynamic;
public var boxModel:String;
public var toJsonIndentStr:String;
public var jaxer:Dynamic;
public var parser:Dynamic;
public var robot:Dynamic;
public var robotx:Dynamic;
public var tests:Dynamic;

}
